name: Build and Pubish Backend Dockers to AWS ECR

on:
  workflow_call:
    inputs:
      AWSRegion:
        required: true
        type: string
      DeploymentName:
        required: false
        type: string
        default: "${GITHUB_REF_NAME##*/}"
    secrets:
      AWS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:

  docker:
    strategy:
      matrix:
        service:
          - authentication
          - signaling
          - ingress
          - egress
          - movement

    runs-on: ubuntu-latest
    steps:
      - name: Set env variable for ref tag
        run: echo "DEPLOYMENT_NAME=$(echo ${{ inputs.DeploymentName }})" >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build \
                 --file docker/Dockerfile.${{ matrix.service }} \
                 --tag ${{ matrix.service }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }} \
                 --tag ${{ matrix.service }}/${{ env.DEPLOYMENT_NAME }}:latest \
                 --tag ${{ matrix.service }} .

      - name: Publish latest docker image to AWS Elastic Container Registry
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ inputs.AWSRegion }}
          image: ${{ matrix.service }}/${{ env.DEPLOYMENT_NAME }}:latest
          local-image: ${{ matrix.service }}

      - name: Publish docker image with commit hash to AWS Elastic Container Registry
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ inputs.AWSRegion }}
          image: ${{ matrix.service }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }}
          local-image: ${{ matrix.service }}

      - name: Preserve docker images as build artifact
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: ${{ matrix.service }}
          retention_days: "16"
