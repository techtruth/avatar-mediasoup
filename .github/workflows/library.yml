name: Library Interface - Build and Deploy - Docker

on:
  push:
    branches: [production]
    tags:
      - library

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Include production webapp sevice credentials
        run: |
          cat << EOF > ./frame/webapp/credentials.json
            {
              "firebase": {
                "apiKey": "AIzaSyA-DHy62a8kLOGahywbTmIynXRxQ9XFT0k",
                "authDomain": "auth.framevr.io",
                "databaseURL": "https://frame-vr.firebaseio.com",
                "projectId": "frame-vr",
                "storageBucket": "frame-vr-sketchfab",
                "messagingSenderId": "19282186447",
                "appId": "1:19282186447:web:aa9609a7cd67573d8e67ba"
              },
              "googleClientID": "19282186447-eo9sfdpsj9arhl5mqrt23llin64g6tr5.apps.googleusercontent.com",
              "cloudinary": {
                "video_upload_preset": "nbwxlqkc"
              },
              "plausible": {
                "name": "framevr.io"
              },
              "quickHelp": {
                "mainId": "63e10679a84cb3206267dfd8", 
                "groupId": "ZAvHnj6NyurYNZH6t"
              },
              "immers": {
                "server": "https://i.framevr.io",
                "clientID": "none",
                "clientSecret": "none"
             }
            }
          EOF
      - name: Build library frontend in production mode using docker
        run: docker-compose --file docker/docker-compose.yml run --user root --entrypoint "/bin/bash -c 'npm run build:library'" signaling
      - name: Preserve built front end
        uses: actions/upload-artifact@v3
        with:
          name: dist-interface-library
          path: frame/webapp/dist
          retention-days: 5
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Retrieve previously built front-end
        uses: actions/download-artifact@v3
        with:
          name: dist-interface-library
          path: frame/webapp/dist

      - name: Upload webapp to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete --exclude index.html
        env:
          AWS_S3_BUCKET: publicworkslibrary-webapp
          AWS_ACCESS_KEY_ID: ${{ secrets.NEWPROD_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.NEWPROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SOURCE_DIR: frame/webapp/dist

      - name: Upload webapp index.html (no-cache) to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete --cache-control 'no-cache, s-maxage=86400' --include index.html
        env:
          AWS_S3_BUCKET: publicworkslibrary-webapp
          AWS_ACCESS_KEY_ID: ${{ secrets.NEWPROD_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.NEWPROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SOURCE_DIR: frame/webapp/dist

      - name: Invalidate aws cloudfront to update global webapp cache
        uses: awact/cloudfront-action@master
        env:
          SOURCE_PATH: "/*"
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.NEWPROD_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.NEWPROD_AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION_ID: ${{ secrets.LIBRARY_CLOUDFRONT }}

  healthcheck:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Front end Health Check
        uses: jtalk/url-health-check-action@v2
        with:
          url: https://library.framevr.io
          follow-redirect: true
          max-attempts: 5
          retry-delay: 15s
