name: Build and Deploy Egress and Ingress RealTime-Media Containers

on:
  workflow_call:
    inputs:
      AWSRegion:
        required: true
        type: string
      AWSECR:
        required: true
        type: string
      DockerName:
        required: false
        type: string
        default: "${GITHUB_REF_NAME##*/}"
      DeploymentName:
        required: false
        type: string
        default: "${GITHUB_REF_NAME##*/}"
    secrets:
      AWS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:

  deploy-ecs-clusters-ingress:
    strategy:
      matrix:
        region: ${{ fromJson(inputs.AWSRegion) }}
    runs-on: ubuntu-latest
    steps:
      - name: Set env variable for ref tag
        run: |
          echo "DEPLOYMENT_NAME=$(echo ${{ inputs.DeploymentName }})" >> $GITHUB_ENV
          echo "DOCKER_NAME=$(echo ${{ inputs.DockerName }})" >> $GITHUB_ENV

      - name: Configure AWS credentials to use inputs.AWSRegion region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Download task definition for ingress
        run: |
          aws ecs describe-task-definition --task-definition ingress-${{ env.DEPLOYMENT_NAME }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: rendertask-ingress
        with:
          task-definition: task-definition.json
          container-name: ingress
          image: ${{ inputs.AWSECR }}.dkr.ecr.us-east-1.amazonaws.com/ingress/${{ env.DOCKER_NAME }}:latest

      - name: Preserve ECR Task file
        uses: actions/upload-artifact@v3
        with:
          name: ecr-task-ingress-${{ matrix.region }}.json
          path: task-definition.json
          retention-days: 5
          if-no-files-found: error

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.rendertask-ingress.outputs.task-definition }}
          service: ingress
          cluster: ${{ env.DEPLOYMENT_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  deploy-ecs-clusters-egress:
    strategy:
      matrix:
        region: ${{ fromJson(inputs.AWSRegion) }}
    runs-on: ubuntu-latest
    steps:
      - name: Set env variable for ref tag
        run: |
          echo "DEPLOYMENT_NAME=$(echo ${{ inputs.DeploymentName }})" >> $GITHUB_ENV
          echo "DOCKER_NAME=$(echo ${{ inputs.DockerName }})" >> $GITHUB_ENV

      - name: Configure AWS credentials to use inputs.AWSRegion region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Download task definition for egress
        run: |
          aws ecs describe-task-definition --task-definition egress-${{ env.DEPLOYMENT_NAME }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: rendertask-egress
        with:
          task-definition: task-definition.json
          container-name: egress
          image: ${{ inputs.AWSECR }}.dkr.ecr.us-east-1.amazonaws.com/egress/${{ env.DOCKER_NAME }}:latest


      - name: Preserve ECR Task file
        uses: actions/upload-artifact@v3
        with:
          name: ecr-task-egress-${{ matrix.region }}.json
          path: task-definition.json
          retention-days: 5
          if-no-files-found: error

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.rendertask-egress.outputs.task-definition }}
          service: egress
          cluster: ${{ env.DEPLOYMENT_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  deploy-ecs-clusters-movement-primary:
    strategy:
      matrix:
        region: ${{ fromJson(inputs.AWSRegion) }}
    runs-on: ubuntu-latest
    steps:
      - name: Set env variable for ref tag
        run: |
          echo "DEPLOYMENT_NAME=$(echo ${{ inputs.DeploymentName }})" >> $GITHUB_ENV
          echo "DOCKER_NAME=$(echo ${{ inputs.DockerName }})" >> $GITHUB_ENV

      - name: Configure AWS credentials to use inputs.AWSRegion region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Download task definition for movement-primary
        run: |
          aws ecs describe-task-definition --task-definition movement-primary-${{ env.DEPLOYMENT_NAME }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: rendertask-movement-primary
        with:
          task-definition: task-definition.json
          container-name: movement-primary
          image: ${{ inputs.AWSECR }}.dkr.ecr.us-east-1.amazonaws.com/movement/${{ env.DOCKER_NAME }}:latest


      - name: Preserve ECR Task file
        uses: actions/upload-artifact@v3
        with:
          name: ecr-task-movement-primary-${{ matrix.region }}.json
          path: task-definition.json
          retention-days: 5
          if-no-files-found: error

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.rendertask-movement-primary.outputs.task-definition }}
          service: movement-primary
          cluster: ${{ env.DEPLOYMENT_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  deploy-ecs-clusters-movement-secondary:
    strategy:
      matrix:
        region: ${{ fromJson(inputs.AWSRegion) }}
    runs-on: ubuntu-latest
    steps:
      - name: Set env variable for ref tag
        run: |
          echo "DEPLOYMENT_NAME=$(echo ${{ inputs.DeploymentName }})" >> $GITHUB_ENV
          echo "DOCKER_NAME=$(echo ${{ inputs.DockerName }})" >> $GITHUB_ENV

      - name: Configure AWS credentials to use inputs.AWSRegion region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Download task definition for movement-secondary
        run: |
          aws ecs describe-task-definition --task-definition movement-secondary-${{ env.DEPLOYMENT_NAME }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: rendertask-movement-secondary
        with:
          task-definition: task-definition.json
          container-name: movement-secondary
          image: ${{ inputs.AWSECR }}.dkr.ecr.us-east-1.amazonaws.com/movement/${{ env.DOCKER_NAME }}:latest

      - name: Preserve ECR Task file
        uses: actions/upload-artifact@v3
        with:
          name: ecr-task-movement-secondary-${{ matrix.region }}.json
          path: task-definition.json
          retention-days: 5
          if-no-files-found: error

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.rendertask-movement-secondary.outputs.task-definition }}
          service: movement-secondary
          cluster: ${{ env.DEPLOYMENT_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true
