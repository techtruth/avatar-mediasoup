name: Build and Deploy Front-End Interfaces

on:
  workflow_call:
    inputs:
      MainlineBuildCommand:
        required: false
        type: string
        default: "build:dev"
      QuickBuildCommand:
        required: false
        type: string
        default: "build:dev:quick"
      ImmersServer:
        required: false
        type: string
        default: "i.dev.framevr.io"
      S3BaseName:
        required: true
        type: string
        default: "dev.framevr.io"
      enableMainline:
        required: false
        type: boolean
        default: true
      enableMainlineSourcemaps:
        required: false
        type: boolean
        default: false
      enableQuick:
        required: false
        type: boolean
        default: false
      enableCompression:
        required: false
        type: boolean
        default: false
      BrandingName:
        required: false
        type: string
        default: "Frame (Dev)"
      BrandingType:
        required: false
        type: string
        default: "mainline"
      HomeRedirect:
        required: false
        type: string
        default: "undefined"
      HomeFrame:
        required: false
        type: string
        default: "undefined"
      OutLink:
        required: false
        type: string
        default: "https://dev.framevr.io"
      MetaImage:
        required: false
        type: string
        default: "https://dev.framevr.io/assets/meta-image.png"
      Description:
        required: false
        type: string
        default: "(Dev) Immersive presentations and meetings - right from the browser on desktop, mobile, and VR"
      ShortDescription:
        required: false
        type: string
        default: "(Dev) FRAME is a space for immersive presentations and meetings - right from a browser"
      TermsOfService:
        required: false
        type: string
        default: "https://learn.framevr.io/tos-privacy-policy"
      SupportEmail:
        required: false
        type: string
        default: "hello@framevr.io"
      FirebaseAPIKey:
        required: false
        type: string
        default: "AIzaSyDfrulJsRqG-1RE07kpJtIZYBjUmZql4Os"
      FirebaseProjectID:
        required: false
        type: string
        default: "frame-vr-dev"
      FirebaseMessagingSenderId:
        required: false
        type: string
        default: "196341899052"
      FirebaseAppId:
        required: false
        type: string
        default: "1:196341899052:web:a4b10863c23ced4ecad689"
      GoogleClientId:
        required: false
        type: string
        default: "196341899052-nn737pfgondu561qrqvgrijei6qiq65u.apps.googleusercontent.com"
      MapBoxKey:
        required: false
        type: string
        default: "pk.eyJ1IjoiZnJhbWV2ciIsImEiOiJja3NvdG8yMTMwMjdiMnBxaHRxa3QzNDE3In0.-m3aCdM6VPLvn_Vy4sVIDg"
      CloudinaryUploadPreset:
        required: false
        type: string
        default: "aufhw4y7"
      Plausible:
        required: false
        type: string
        default: "dev.framevr.io"
      QuickHelpMainId:
        required: false
        type: string
        default: "63e10679a84cb3206267dfd8"
      QuickHelpGroupId:
        required: false
        type: string
        default: "ZAvHnj6NyurYNZH6t"
    secrets:
      AWS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      MainlineCloudfrontDistribution:
        required: true
      QuickCloudfrontDistribution:
        required: true

jobs:
  mainline-interface:
    if: inputs.enableMainline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Generate client whitelabel branding
        run: |
          cat << EOF > ./frame/webapp/core/branding.js
          //Branding image and text references
          const branding = {
            type: "${{ inputs.BrandingType  }}",
            homeRedirect: ${{ inputs.HomeRedirect }},
            homeFrame: ${{ inputs.HomeFrame }},
            outLink: "${{ inputs.OutLink }}",
            favIcon: "stage/branding/favicon.ico",
            metaImage: "${{ inputs.MetaImage }}",
            name: "${{ inputs.BrandingName }}",
            description: "${{ inputs.Description }}",
            shortDescription: "${{ inputs.ShortDescription }}",
            termsOfService: "${{ inputs.TermsOfService }}",
            support: "${{ inputs.SupportEmail }}"
          };
          module.exports = branding;
          EOF

      - name: Include client third party webapp sevice credentials
        run: |
          cat << EOF > ./frame/webapp/credentials.json
            {
               "firebase": {
               "apiKey": "${{ inputs.FirebaseAPIKey }}",
               "authDomain": "${{ inputs.FirebaseProjectId }}.firebaseapp.com",
               "databaseURL": "https://${{ inputs.FirebaseProjectId }}.firebaseapp.com",
               "projectId": "${{ inputs.FirebaseProjectId }}",
               "storageBucket": "${{ inputs.FirebaseProjectId }}.appspot.com",
               "messagingSenderId": "${{ inputs.FirebaseMessagingSenderId }}",
               "appId": "${{ inputs.FirebaseAppId }}"
             },
             "googleClientID": "${{ inputs.GoogleClientId }}",
             "mapBoxKey": "${{ inputs.MapBoxKey }}",
             "cloudinary": {
               "video_upload_preset": "${{ inputs.CloudinaryUploadPreset }}"
             },
             "extension": {
               "uiBaseURL": "https://framevr.io",
               "googleCalendarURL": "https://calendar.google.com/"
             },
             "plausible": {
              "name": "${{ inputs.Plausible }}"
             },
             "quickHelp": {
              "mainId": "${{ inputs.QuickHelpMainId }}",
              "groupId": "${{ inputs.QuickHelpGroupId }}"
             },
             "immers": {
              "server": "${{ inputs.ImmersServer }}",
              "clientID": "none",
              "clientSecret": "none"
             }
            }
          EOF

      - name: Download branding images from s3 bucket
        uses: prewk/s3-cp-action@v2
        with:
          source: s3://branding.${{ inputs.S3BaseName }}
          dest: frame/webapp/stage/branding
          flags: --recursive
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build mainline webapp interface
        run: docker-compose --file docker/docker-compose.yml run --user root --entrypoint "npm run ${{ inputs.MainlineBuildCommand }}" signaling

      - name: Upload compiled webapp files to s3 for disribution to CDN
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete --exclude="*.glb"
        env:
          AWS_S3_BUCKET: mainline.${{ inputs.S3BaseName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SOURCE_DIR: frame/webapp/dist

      - name: Upload compiled and encoded webapp files to s3 for disribution to CDN
        uses: jakejarvis/s3-sync-action@master
        if: inputs.enableCompression == true
        with:
          args: --delete --include="*.glb" --content-type="gltf-binary" --content-encoding="br"
        env:
          AWS_S3_BUCKET: mainline.${{ inputs.S3BaseName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SOURCE_DIR: frame/webapp/dist

      - name: Upload compiled and encoded webapp files to s3 for disribution to CDN
        uses: jakejarvis/s3-sync-action@master
        if: inputs.enableCompression == false
        with:
          args: --delete --include="*.glb"
        env:
          AWS_S3_BUCKET: mainline.${{ inputs.S3BaseName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SOURCE_DIR: frame/webapp/dist

      - name: Invalidate aws cloudfront to update global webapp cache
        uses: awact/cloudfront-action@master
        env:
          SOURCE_PATH: "/*"
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION_ID: ${{ secrets.MainlineCloudfrontDistribution }}

      - name: Preserve built front end
        uses: actions/upload-artifact@v3
        with:
          name: mainline-interface
          path: |
            frame/webapp/dist/
          retention-days: 5
          if-no-files-found: error

      - name: Preserve front end package lock
        uses: actions/upload-artifact@v3
        with:
          name: mainline-packagelock
          path: |
            frame/package-lock.json
          retention-days: 5
          if-no-files-found: error

  quick-interface:
    if: inputs.enableQuick
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Include client third party webapp sevice credentials
        run: |
          cat << EOF > ./frame/webapp/credentials.json
            {
               "firebase": {
               "apiKey": "${{ inputs.FirebaseAPIKey }}",
               "authDomain": "${{ inputs.FirebaseProjectId }}.firebaseapp.com",
               "databaseURL": "https://${{ inputs.FirebaseProjectId }}.firebaseapp.com",
               "projectId": "${{ inputs.FirebaseProjectId }}",
               "storageBucket": "${{ inputs.FirebaseProjectId }}.appspot.com",
               "messagingSenderId": "${{ inputs.FirebaseMessagingSenderId }}",
               "appId": "${{ inputs.FirebaseAppId }}"
             },
             "googleClientID": "${{ inputs.GoogleClientId }}",
             "mapBoxKey": "${{ inputs.MapBoxKey }}",
             "cloudinary": {
               "video_upload_preset": "${{ inputs.CloudinaryUploadPreset }}"
             },
             "plausible": {
              "name": "${{ inputs.Plausible }}"
             },
             "quickHelp": {
              "mainId": "${{ inputs.QuickHelpMainId }}",
              "groupId": "${{ inputs.QuickHelpGroupId }}"
             },
             "immers": {
              "server": "${{ inputs.ImmersServer }}",
              "clientID": "none",
              "clientSecret": "none"
             }
            }
          EOF

      - name: Generate client whitelabel branding
        run: |
          cat << EOF > ./frame/webapp/core/branding.js
          //Branding image and text references
          const branding = {
            type: "${{ inputs.BrandingType  }}",
            homeRedirect: ${{ inputs.HomeRedirect }},
            homeFrame: ${{ inputs.HomeFrame }},
            outLink: "${{ inputs.OutLink }}",
            favIcon: "stage/branding/favicon.ico",
            metaImage: "${{ inputs.MetaImage }}",
            name: "${{ inputs.BrandingName }}",
            description: "${{ inputs.Description }}",
            shortDescription: "${{ inputs.ShortDescription }}",
            termsOfService: "${{ inputs.TermsOfService }}",
            support: "${{ inputs.SupportEmail }}"
          };
          module.exports = branding;
          EOF

      - name: Download branding images from s3 bucket
        uses: prewk/s3-cp-action@v2
        with:
          source: s3://branding.${{ inputs.S3BaseName }}
          dest: frame/webapp/stage/branding
          flags: --recursive
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build quick webapp interface
        run: docker-compose --file docker/docker-compose.yml run --user root --entrypoint "npm run ${{ inputs.QuickBuildCommand }}" signaling

      - name: Upload compiled webapp to s3 for disribution to CDN
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: quick.${{ inputs.S3BaseName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SOURCE_DIR: frame/webapp/dist

      - name: Invalidate aws cloudfront to update global webapp cache
        uses: awact/cloudfront-action@master
        env:
          SOURCE_PATH: "/*"
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION_ID: ${{ secrets.QuickCloudfrontDistribution }}

      - name: Preserve built front end
        uses: actions/upload-artifact@v3
        with:
          name: quick-interface
          path: |
            frame/webapp/dist/
          retention-days: 5
          if-no-files-found: error

      - name: Preserve quick front end package lock
        uses: actions/upload-artifact@v3
        with:
          name: quick-packagelock
          path: |
            frame/package-lock.json
          retention-days: 5
          if-no-files-found: error

  mainline-sourcemaps:
    if: inputs.enableMainlineSourcemaps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Generate client whitelabel branding
        run: |
          cat << EOF > ./frame/webapp/core/branding.js
          //Branding image and text references
          const branding = {
            type: "${{ inputs.BrandingType  }}",
            homeRedirect: ${{ inputs.HomeRedirect }},
            homeFrame: ${{ inputs.HomeFrame }},
            outLink: "${{ inputs.OutLink }}",
            favIcon: "stage/branding/favicon.ico",
            metaImage: "${{ inputs.MetaImage }}",
            name: "${{ inputs.BrandingName }}",
            description: "${{ inputs.Description }}",
            shortDescription: "${{ inputs.ShortDescription }}",
            termsOfService: "${{ inputs.TermsOfService }}",
            support: "${{ inputs.SupportEmail }}"
          };
          module.exports = branding;
          EOF

      - name: Include client third party webapp sevice credentials
        run: |
          cat << EOF > ./frame/webapp/credentials.json
            {
               "firebase": {
               "apiKey": "${{ inputs.FirebaseAPIKey }}",
               "authDomain": "${{ inputs.FirebaseProjectId }}.firebaseapp.com",
               "databaseURL": "https://${{ inputs.FirebaseProjectId }}.firebaseapp.com",
               "projectId": "${{ inputs.FirebaseProjectId }}",
               "storageBucket": "${{ inputs.FirebaseProjectId }}.appspot.com",
               "messagingSenderId": "${{ inputs.FirebaseMessagingSenderId }}",
               "appId": "${{ inputs.FirebaseAppId }}"
             },
             "googleClientID": "${{ inputs.GoogleClientId }}",
             "mapBoxKey": "${{ inputs.MapBoxKey }}",
             "cloudinary": {
               "video_upload_preset": "${{ inputs.CloudinaryUploadPreset }}"
             },
             "extension": {
               "uiBaseURL": "https://framevr.io",
               "googleCalendarURL": "https://calendar.google.com/"
             },
             "plausible": {
              "name": "${{ inputs.Plausible }}"
             },
             "quickHelp": {
              "mainId": "${{ inputs.QuickHelpMainId }}",
              "groupId": "${{ inputs.QuickHelpGroupId }}"
             },
             "immers": {
              "server": "${{ inputs.ImmersServer }}",
              "clientID": "none",
              "clientSecret": "none"
             }
            }
          EOF

      - name: Download branding images from s3 bucket
        uses: prewk/s3-cp-action@v2
        with:
          source: s3://branding.${{ inputs.S3BaseName }}
          dest: frame/webapp/stage/branding
          flags: --recursive
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build mainline webapp interface
        run: docker-compose --file docker/docker-compose.yml run --user root --entrypoint "npm run ${{ inputs.MainlineBuildCommand }}:sourcemaps" signaling

      - name: Preserve built front end
        uses: actions/upload-artifact@v3
        with:
          name: mainline-interface-sourcemaps
          path: |
            frame/webapp/dist/
          retention-days: 5
          if-no-files-found: error

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: frame

      - name: Publish datadog
        env:
          DATADOG_API_KEY: 25fc96bf2afe1afdd18513cbe03a5587
          DATADOG_SITE: us5.datadoghq.com
        run: |
          npm install @datadog/datadog-ci@2.10.0
          npx datadog-ci sourcemaps upload ./frame/webapp/dist \
            --service="${{ inputs.BrandingName }}" \
            --release-version=${{ steps.package-version.outputs.current-version}} \
            --minified-path-prefix=/
