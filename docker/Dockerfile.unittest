FROM nvidia/cuda:12.2.0-runtime-ubuntu20.04

##Install puppeteer dependencies
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
      ca-certificates \
      fonts-liberation \
      libappindicator3-1 \
      libasound2 \
      libatk-bridge2.0-0 \
      libatk1.0-0 \
      libc6 \
      libcairo2 \
      libcups2 \
      libdbus-1-3 \
      libexpat1 \
      libfontconfig1 \
      libgbm1 \
      libgcc1 \
      libglib2.0-0 \
      libgtk-3-0 \
      libnspr4 \
      libnss3 \
      libpango-1.0-0 \
      libpangocairo-1.0-0 \
      libstdc++6 \
      libx11-6 \
      libx11-xcb1 \
      libxcb1 \
      libxcomposite1 \
      libxcursor1 \
      libxdamage1 \
      libxext6 \
      libxfixes3 \
      libxi6 \
      libxrandr2 \
      libxrender1 \
      libxss1 \
      libxtst6 \
      lsb-release \
      wget \
      xdg-utils \
      xvfb

WORKDIR /container
#RUN mkdir -p app/node_modules
# ensure node user can edit node_modules folder
RUN chown -R 1000 /container

#Install NPM and NodeJS
ENV NVM_DIR /usr/local/nvm
RUN mkdir -p $NVM_DIR
RUN wget -O- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
RUN . "/usr/local/nvm/nvm.sh" && nvm install --lts
# With the volume mounts used in our docker-compose files, /app/node_modules
# persists between different builds and this can create an invalid dependencies state.
# Instead, we leave /app/node_modules (and its volume mount) empty and store an
# immutable copy in the parent container folder. NodeJS module resolution automatically
# climbs the directory tree so app runs as if nothing is different
COPY --chown=1000:root ./frame/package*.json ./
RUN . "/usr/local/nvm/nvm.sh" && npm ci
ENV PATH $PATH:/usr/local/nvm/versions/node/v18.17.1/bin

WORKDIR /container/app
COPY --chown=1000:root ./frame/package*.json ./
COPY --chown=1000:root ./frame/test/ ./test/

ENTRYPOINT ["xvfb-run", "-a", "npm", "run", "test"]
